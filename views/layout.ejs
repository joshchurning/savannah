<!DOCTYPE html>
<html ng-app="app">
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/main.css">
    <!--STYLES END-->
  </head>

  <body>
  <nav class="navbar navbar-default">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" ng-init="isCollapsed = true" ng-click="isCollapsed = !isCollapsed">
        <i class="fa fa-bars">=</i>
        </button>
        <a class="navbar-brand" href="/">S R</a>
      </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="navbar-collapse" ng-class="{collapse: isCollapsed}">
      <ul class="nav navbar-nav" ng-controller="main">
        <li><a href="#" ng-click="openContactModal()">Contact</a></li>
        <li><a href="#" ng-click="openLoginModal()">Admin Login</a></li>
        <li><a href="#" ng-click="openSignupModal()">Sign Up</a></li>
        <li><a href="#" ng-click="opeFileDownloadModal()">Download Files</a></li>
        <% if(req.user){%>
        <li><a href="#" ng-click="opeFileUploadModal()">File Upload</a></li>
        <li><a href="logout">Logout</a></li>
        <%}%>
        <!-- <li><a href="post">Auth Check</a></li> -->
      </ul>
   </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
    <%- body %>




    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    <script type="text/ng-template" id="modalTemplate.html">
      <div class="modal-header">
        <h4 class="modal-title">Contact Me!</h3>
      </div> 
      <div class="modal-body">
        <formly-form model="data" fields="fields" form="form">
          <button class="btn btn-primary"  ng-disabled="form.$invalid" ng-click="sendContactEmail()">Submit</button>
          <button class="btn btn-danger" ng-click="close()">Cancel</button>
        </formly-form>
      </div>  
    </script>
    
    <script type="text/ng-template" id="login.html">
      <div class="modal-header">
        <h4 class="modal-title">Login</h3>
      </div>
      <div class="modal-body">
        <form method="POST" action="/login">
          <input type="text" name="email">
          <input type="password" name="password">
          <input type="submit" value="submit">
        </form> <br>
        <button class="btn btn-danger" ng-click="close()">Cancel</button>
      </div>
    </script>

    <script type="text/ng-template" id="signup.html">
      <div class="modal-header">
        <h4 class="modal-title">Sign Up</h3>
      </div>
      <div class="modal-body">
        <form method="POST" action="/user">
          <input type="text" name="email">
          <input type="password" name="password">
          <input type="submit" value="submit">
        </form>
        <button class="btn btn-danger" ng-click="close()">Cancel</button>
      </div>
    </script>

    <script type="text/ng-template" id="file-upload.html">
      <div class="modal-body">
        <form action="file/upload" enctype="multipart/form-data" method="post">
          <input type="file" name="avatar" multiple="multiple"><br>
          <input type="submit" value="Upload">
        </form>
        <button class="btn btn-danger" ng-click="close()">Cancel</button>
      </div>
    </script>

    <script type="text/ng-template" id="file-download.html">
      <div class="modal-body">
        <input type="text" ng-model="downloadName">
        <button ng-click="showDownload = true">Submit</button>
        <br><br>
        <a ng-show="showDownload" ng-href="/uploads/{{downloadName}}"><h3>Download Link</h3></a>
        <button class="btn btn-danger" ng-click="close()">Cancel</button>
      </div>
    </script>
    <!-- <script type="text/ng-template" id="login.html">
      <div class="modal-header">
        <h4 class="modal-title">Contact Me!</h3>
      </div> 
      <div class="modal-body">
        <formly-form model="data" fields="fields" form="form">
          <button class="btn btn-primary"  ng-disabled="form.$invalid" ng-click="sendContactEmail()">Submit</button>
          <button class="btn btn-danger" ng-click="close()">Cancel</button>
        </formly-form>
      </div>  
    </script> -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/bower_components/jquery/dist/jquery.js"></script>
    <script src="/bower_components/angular/angular.js"></script>
    <script src="/bower_components/api-check/dist/api-check.js"></script>
    <script src="/bower_components/angular-route/angular-route.js"></script>
    <script src="/bower_components/angular-bootstrap/ui-bootstrap-tpls.min.js"></script>
    <script src="/bower_components/angular-formly/dist/formly.js"></script>
    <script src="/bower_components/angular-formly-templates-bootstrap/dist/angular-formly-templates-bootstrap.js"></script>
    <script src="/js/app.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
